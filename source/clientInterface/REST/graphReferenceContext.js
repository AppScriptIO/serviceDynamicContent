"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.fileReferenceList = exports.conditionFunctionReferenceList = exports.middlewareFunctionReferenceList = void 0;var _assert = _interopRequireDefault(require("assert"));
var _path = _interopRequireDefault(require("path"));
var _namedCurry = require("@dependency/namedCurry");
var _ramda = require("ramda");
var symbol = _interopRequireWildcard(require("./symbol.reference.js"));

var _graphEvaluationFunction = require("./graphEvaluationFunction.js");
var _babelTranspiler = require("./middleware/babelTranspiler.js");
var _serveFile = require("./middleware/serveFile.js");
var _useragentDetection = require("./middleware/useragentDetection.js");
var _commonFunctionality2 = require("./middleware/commonFunctionality.js");
var _notFound2 = require("./middleware/notFound.js");
var _mapPathToAbsolutePath = require("./middleware/map@PathToAbsolutePath.js");
var _bodyParser = require("./middleware/bodyParser.js");
var _debugMiddlewareProxy = require("../../utility/debugMiddlewareProxy.js");
var _contextManipulation = require("./middleware/contextManipulation.js");
var _languageContent = require("./middleware/languageContent.js");
var _templateRendering = require("./middleware/templateRendering.js");
var _traverseTemplateGraph = require("./middleware/traverseTemplateGraph.js");
var _wrapString = require("./pipeFunction/wrapString.js");var _middlewareFunctionRe, _conditionFunctionRef, _fileReferenceList, _pipeFunctionReferenc;









let middlewareFunctionReferenceList = ({ targetProjectConfig, configuredGraph, middlewareContext }) => (



{
  nodeDebug: ({ node, traverser }) => {var _ref;return _ref = async next => console.log(`• executed middleware in node: ${JSON.stringify(node.properties)}`), (0, _debugMiddlewareProxy.debugMiddlewareProxy)(_ref);},
  bodyParser: ({ node, traverser }) => {var _bodyParserMiddleware;return (_bodyParserMiddleware = _bodyParser.bodyParserMiddleware, (0, _ramda.curry)(_bodyParserMiddleware))(middlewareContext);},
  serveStaticFile: ({ node, traverser }) => (0, _ramda.curry)((0, _serveFile.serveStaticFile)({ targetProjectConfig, filePath: node.properties.filePath, basePath: node.properties.basePath }))(middlewareContext),
  serveServerSideRenderedFile: ({ node, traverser }) => {var _serveServerSideRende;return (
      (_serveServerSideRende =
      (0, _serveFile.serveServerSideRenderedFile)({
        filePath: node.properties.filePath,
        basePath: node.properties.basePath,
        renderType: node.properties.renderType,
        mimeType: node.properties.mimeType }), (0,
      _ramda.curry)(_serveServerSideRende))(
      middlewareContext));},
  setResponseHeaders: ({ node, traverser }) => {var _setResponseHeaders;return (_setResponseHeaders = (0, _contextManipulation.setResponseHeaders)(), (0, _ramda.curry)(_setResponseHeaders))(middlewareContext);},
  setFrontendSetting: ({ node, traverser }) => {var _setFrontendSetting;return (_setFrontendSetting = (0, _languageContent.setFrontendSetting)(), (0, _ramda.curry)(_setFrontendSetting))(middlewareContext);},
  pickClientSideProjectConfig: ({ node, traverser }) => {var _pickClientSideProjec;return (_pickClientSideProjec = (0, _useragentDetection.pickClientSideProjectConfig)({ targetProjectConfig }), (0, _ramda.curry)(_pickClientSideProjec))(middlewareContext);},
  commonFunctionality: ({ node, traverser }) => {var _commonFunctionality;return (_commonFunctionality = (0, _commonFunctionality2.commonFunctionality)({ middlewareContext }), (0, _ramda.curry)(_commonFunctionality))(middlewareContext);},
  notFound: ({ node, traverser }) => {var _notFound;return (_notFound = (0, _notFound2.notFound)(), (0, _ramda.curry)(_notFound))(middlewareContext);},
  cacheControl: ({ node, traverser }) => {var _cacheControl;return (_cacheControl = (0, _contextManipulation.cacheControl)(), (0, _ramda.curry)(_cacheControl))(middlewareContext);},
  transformJavascriptMiddleware: ({ node, traverser }) => {var _transformJavascriptM;return (_transformJavascriptM = (0, _babelTranspiler.transformJavascriptMiddleware)(), (0, _ramda.curry)(_transformJavascriptM))(middlewareContext);},
  expandAtSignPath: ({ node, traverser }) => {var _expandAtSignPath;return (_expandAtSignPath = (0, _mapPathToAbsolutePath.expandAtSignPath)(), (0, _ramda.curry)(_expandAtSignPath))(middlewareContext);},
  templateRenderingMiddleware: ({ node, traverser }) => {var _templateRenderingMid;return (_templateRenderingMid = (0, _templateRendering.templateRenderingMiddleware)(), (0, _ramda.curry)(_templateRenderingMid))(middlewareContext);},
  graphRenderedTemplateDocument: async function ({ node, traverser }) {var _ref2;
    let curriedFileReferenceList = fileReferenceList({ targetProjectConfig, configuredGraph }),
    curriedPipeFunctionReferenceList = pipeFunctionReferenceList({ targetProjectConfig, configuredGraph });

    return (_ref2 =
    await (0, _traverseTemplateGraph.graphDocumentRenderingMiddlewareAdapter)({
      middlewareNode: node,
      graphInstance: traverser.graph,
      configuredGraph,
      referenceList: middlewareContext => ({
        functionReferenceContext: curriedPipeFunctionReferenceList({ middlewareContext }),
        fileContext: curriedFileReferenceList({ middlewareContext }) }) }), (0,

    _ramda.curry)(_ref2))(
    middlewareContext);
  } });exports.middlewareFunctionReferenceList = middlewareFunctionReferenceList;


let conditionFunctionReferenceList = ({ targetProjectConfig, configuredGraph, middlewareContext }) => (



{
  getUrlPathLevel: ({ node, traverser }) => (0, _graphEvaluationFunction.getUrlPathLevel)({ middlewareContext, level: node.properties.level }),
  isExistUrlPathLevel: ({ node, traverser }) => (0, _graphEvaluationFunction.isExistUrlPathLevel)({ middlewareContext, level: node.properties.level }),
  ifLevel1IncludesAt: async ({ node, traverser }) => await (0, _graphEvaluationFunction.ifLevel1IncludesAt)(middlewareContext),
  ifLastUrlPathtIncludesFunction: ({ node, traverser }) => (0, _graphEvaluationFunction.ifLastUrlPathtIncludesFunction)(middlewareContext),
  getRequestMethod: ({ node, traverser }) => (0, _graphEvaluationFunction.getRequestMethod)(middlewareContext),
  getUrlPathAsArray: ({ node, traverser }) => (0, _graphEvaluationFunction.getUrlPathAsArray)(middlewareContext) });exports.conditionFunctionReferenceList = conditionFunctionReferenceList;


let pipeFunctionReferenceList = ({ targetProjectConfig, configuredGraph, middlewareContext }) => (



{
  wrapWithJsTag: ({ node, traverser }) => (0, _wrapString.wrapWithJsTag)() });



let fileReferenceList = ({ targetProjectConfig, configuredGraph, middlewareContext }) => (

{
  entrypointHTML: ({ node, traverser }) => {
    (0, _assert.default)(middlewareContext[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
    let clientSidePath = middlewareContext[symbol.context.clientSideProjectConfig].path;
    return _path.default.join(clientSidePath, `./template/entrypoint.html`);
  },
  systemjsSetting: ({ node, traverser }) => {
    (0, _assert.default)(middlewareContext[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
    let clientSidePath = middlewareContext[symbol.context.clientSideProjectConfig].path;
    return _path.default.join(clientSidePath, `./javascript/jspm.initialization.js`);
  },
  webcomponentPolyfill: ({ node, traverser }) => {
    (0, _assert.default)(middlewareContext[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
    let clientSidePath = middlewareContext[symbol.context.clientSideProjectConfig].path;
    return _path.default.join(clientSidePath, `./javascript/polymerPolyfill.js`);
  },
  entrypointScript: ({ node, traverser }) => {
    (0, _assert.default)(middlewareContext[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
    let clientSidePath = middlewareContext[symbol.context.clientSideProjectConfig].path;
    return _path.default.join(clientSidePath, `./template/entrypointScript.html`);
  },
  babelTranspiler: ({ node, traverser }) => {
    (0, _assert.default)(middlewareContext[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
    let clientSidePath = middlewareContext[symbol.context.clientSideProjectConfig].path;
    return _path.default.join(clientSidePath, `./javascript/babelTranspiler.js`);
  },
  metadata: ({ node, traverser }) => {
    (0, _assert.default)(middlewareContext[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
    let clientSidePath = middlewareContext[symbol.context.clientSideProjectConfig].path;
    return _path.default.join(clientSidePath, `./metadata/metadata.html`);
  },
  webScoket: ({ node, traverser }) => {
    (0, _assert.default)(middlewareContext[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
    let clientSidePath = middlewareContext[symbol.context.clientSideProjectConfig].path;
    return _path.default.join(clientSidePath, `./javascript/websocket.js`);
  },
  googleAnalytics: ({ node, traverser }) => {
    (0, _assert.default)(middlewareContext[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
    let clientSidePath = middlewareContext[symbol.context.clientSideProjectConfig].path;
    return _path.default.join(clientSidePath, `./javascript/googleAnalytics.js`);
  },
  serviceWorker: ({ node, traverser }) => {
    (0, _assert.default)(middlewareContext[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
    let clientSidePath = middlewareContext[symbol.context.clientSideProjectConfig].path;
    return _path.default.join(clientSidePath, `./javascript/serviceWorker/serviceWorker.js`);
  } });exports.fileReferenceList = fileReferenceList;



exports.middlewareFunctionReferenceList = middlewareFunctionReferenceList = (_middlewareFunctionRe = middlewareFunctionReferenceList, (0, _namedCurry.curryNamed)(['targetProjectConfig', 'configuredGraph', 'middlewareContext'], _middlewareFunctionRe));
exports.conditionFunctionReferenceList = conditionFunctionReferenceList = (_conditionFunctionRef = conditionFunctionReferenceList, (0, _namedCurry.curryNamed)(['targetProjectConfig', 'configuredGraph', 'middlewareContext'], _conditionFunctionRef));
exports.fileReferenceList = fileReferenceList = (_fileReferenceList = fileReferenceList, (0, _namedCurry.curryNamed)(['targetProjectConfig', 'configuredGraph', 'middlewareContext'], _fileReferenceList));
pipeFunctionReferenceList = (_pipeFunctionReferenc = pipeFunctionReferenceList, (0, _namedCurry.curryNamed)(['targetProjectConfig', 'configuredGraph', 'middlewareContext'], _pipeFunctionReferenc));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
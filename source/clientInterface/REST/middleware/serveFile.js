"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.renderTemplateUsingKoaViews = exports.renderJsTemplateUsingUnderscore = exports.renderJSImportWebcomponent = exports.renderHTMLImportWebcomponent = exports.renderFileAsJSModule = exports.renderSharedStyle = exports.serveStaticFile = exports.serveServerSideRenderedFile = void 0;var _path = _interopRequireDefault(require("path"));
var _assert = _interopRequireDefault(require("assert"));
var _fs = _interopRequireDefault(require("fs"));



var _koaSendfile = _interopRequireDefault(require("koa-sendfile"));

var symbol = _interopRequireWildcard(require("../symbol.reference.js"));
var renderFile = _interopRequireWildcard(require("../../../functionality/renderFile.js"));










const serveServerSideRenderedFile = ({ basePath, filePath, renderType, mimeType = 'application/javascript' } = {}) => async (context, next) => {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);

  filePath || (filePath = context[symbol.context.parsed.path]);
  renderType || (renderType = context[symbol.context.parsed.dollarSign]);

  let absoluteFilePath = _path.default.join(context[symbol.context.clientSideProjectConfig].path, basePath || '', filePath);
  let functionReference = renderFile[renderType];
  (0, _assert.default)(functionReference, `• function keyword in the url must have an equivalent in the function reference.`);
  context.body = await functionReference({ filePath: absoluteFilePath });
  context.response.type = mimeType;
  await next();
};exports.serveServerSideRenderedFile = serveServerSideRenderedFile;
















const serveStaticFile = ({ filePath, basePath } = {}) =>
async function serveStaticFile(context, next) {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
  let absoluteFilePath = _path.default.join(
  context[symbol.context.clientSideProjectConfig].path,
  basePath || '',
  filePath || context.path);

  let fileStats = await (0, _koaSendfile.default)(context, absoluteFilePath);

  if (!fileStats || !fileStats.isFile()) await next();
};exports.serveStaticFile = serveStaticFile;









const renderSharedStyle = ({ filePath, basePath, mimeType = 'application/javascript' }) =>
async function renderSharedStyle(context, next) {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
  let clientSidePath = context[symbol.context.clientSideProjectConfig].path;
  let filePath_ = filePath || context.path;
  let absoluteFilePath = _path.default.join(
  clientSidePath,
  basePath || '',
  filePath_);

  context.body = await (0, renderFile.convertSharedStylesToJS)({ filePath: absoluteFilePath });
  context.response.type = mimeType;
  await next();
};exports.renderSharedStyle = renderSharedStyle;

const renderFileAsJSModule = ({ filePath, basePath, mimeType = 'application/javascript' }) =>
async function renderFileAsJSModule(context, next) {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
  let clientSidePath = context[symbol.context.clientSideProjectConfig].path;
  let filePath_ = filePath || context.path;
  let absoluteFilePath = _path.default.join(
  clientSidePath,
  basePath || '',
  filePath_);

  context.body = await (0, renderFile.covertTextFileToJSModule)({ filePath: absoluteFilePath });
  context.response.type = mimeType;
  await next();
};exports.renderFileAsJSModule = renderFileAsJSModule;

const renderHTMLImportWebcomponent = ({ filePath, basePath }) =>
async function renderHTMLImportWebcomponent(context, next) {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
  let clientSidePath = context[symbol.context.clientSideProjectConfig].path;
  let filePath_ = filePath || context.path;
  let absoluteFilePath = _path.default.join(
  clientSidePath,
  basePath || '',
  filePath_);

  context.body = await (0, renderFile.combineHTMLImportWebcomponent)({ filePath: absoluteFilePath });
  await next();
};exports.renderHTMLImportWebcomponent = renderHTMLImportWebcomponent;

const renderJSImportWebcomponent = ({ filePath, basePath }) =>
async function renderJSImportWebcomponent(context, next) {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
  let clientSidePath = context[symbol.context.clientSideProjectConfig].path;
  let filePath_ = filePath || context.path;
  let absoluteFilePath = _path.default.join(
  clientSidePath,
  basePath || '',
  filePath_);

  context.body = await (0, renderFile.combineJSImportWebcomponent)({ filePath: absoluteFilePath });
  await next();
};exports.renderJSImportWebcomponent = renderJSImportWebcomponent;


const renderJsTemplateUsingUnderscore = ({ filePath, basePath }) =>
async function renderJsTemplateUsingUnderscore(context, next) {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
  let clientSidePath = context[symbol.context.clientSideProjectConfig].path;
  let filePath_ = filePath || context.path;
  let absoluteFilePath = _path.default.join(
  clientSidePath,
  basePath || '',
  filePath_);

  try {
    context.body = (0, renderFile.renderTemplateEvaluatingJs)({ filePath: absoluteFilePath, argument: { context } });
    context.response.type = mimeType;
  } catch (error) {
    console.log(error);
    await next();
  }
};exports.renderJsTemplateUsingUnderscore = renderJsTemplateUsingUnderscore;



const renderTemplateUsingKoaViews = ({ filePath, basePath }) =>
async function renderTemplateUsingKoaViews(context, next) {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
  let clientSidePath = context[symbol.context.clientSideProjectConfig].path;
  let filePath_ = filePath || context.path;
  let absoluteFilePath = _path.default.join(
  clientSidePath,
  basePath || '',
  filePath_);


  if (_fs.default.existsSync(absoluteFilePath) && _fs.default.statSync(absoluteFilePath).isFile()) {
    await context.render(absoluteFilePath, { argument: { context } });
    context.response.type = _path.default.extname(absoluteFilePath);
    await next();
  } else await next();
};exports.renderTemplateUsingKoaViews = renderTemplateUsingKoaViews;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
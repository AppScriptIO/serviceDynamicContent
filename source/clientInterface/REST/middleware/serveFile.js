"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.renderTemplateUsingKoaViews = exports.serveServerSideRenderedFile = exports.serveStaticFile = void 0;var _path = _interopRequireDefault(require("path"));
var _assert = _interopRequireDefault(require("assert"));
var _fs = _interopRequireDefault(require("fs"));



var _etag = _interopRequireDefault(require("etag"));
var _koaSendfile = _interopRequireDefault(require("koa-sendfile"));



var symbol = _interopRequireWildcard(require("../symbol.reference.js"));
var renderReferenceContext = _interopRequireWildcard(require("../../../functionality/renderFile.js"));
var processReferenceContext = _interopRequireWildcard(require("../../../functionality/postProcessFile.js"));
var notfound = { ENOENT: true, ENAMETOOLONG: true, ENOTDIR: true };








const serveStaticFile = ({ filePath, basePath } = {}) =>
async function serveStaticFile(context, next) {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);





  context[symbol.context.parsed.filePath] = _path.default.join(
  context[symbol.context.clientSideProjectConfig].path,
  basePath || '',
  filePath || context.path);


  let fileStats = await (0, _koaSendfile.default)(context, context[symbol.context.parsed.filePath]);

  await next();
};exports.serveStaticFile = serveStaticFile;










const serveServerSideRenderedFile = ({ basePath, filePath, renderType, processType, mimeType } = {}) => async (context, next) => {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);

  filePath || (filePath = context[symbol.context.parsed.path]);
  context[symbol.context.parsed.filePath] = _path.default.join(context[symbol.context.clientSideProjectConfig].path, basePath || '', filePath);

  let renderFunction, processFunction;
  try {var _context$symbol$conte, _context$symbol$conte2;
    if (!renderType && ((_context$symbol$conte = context[symbol.context.parsed.dollarSign]) === null || _context$symbol$conte === void 0 ? void 0 : _context$symbol$conte.referenceContextName) == 'render') {
      renderType = context[symbol.context.parsed.dollarSign].functionName;
      renderFunction = renderReferenceContext[renderType];
      if (!renderFunction) throw new Error(`• function keyword in the url must have an equivalent in the function reference - "${renderType}" was not found.`);
    }
    if (!processType && ((_context$symbol$conte2 = context[symbol.context.parsed.dollarSign]) === null || _context$symbol$conte2 === void 0 ? void 0 : _context$symbol$conte2.referenceContextName) == 'process') {
      processType = context[symbol.context.parsed.dollarSign].functionName;
      processFunction = processReferenceContext[processType];
      if (!processFunction) throw new Error(`• function keyword in the url must have an equivalent in the function reference - "${processType}" was not found.`);
    }

    let fileStats = await _fs.default.promises.stat(context[symbol.context.parsed.filePath]).catch(error => {
      if (notfound[error.code]) return;
      error.status = 500;
      context.response.status = error.status;
      throw error;
    });

    if (fileStats && fileStats.isFile()) {
      context.response.lastModified = fileStats.mtime;
      context.response.length = fileStats.size;
      context.response.type = mimeType || _path.default.extname(context[symbol.context.parsed.filePath]);
      if (!context.response.etag) context.response.etag = (0, _etag.default)(fileStats, { weak: true });


      if (context.request.fresh) context.response.status = 304;else
      {

        if (renderType) context.body = await renderFunction({ filePath: context[symbol.context.parsed.filePath] });else
        context.body = _fs.default.createReadStream(context[symbol.context.parsed.filePath]);
      }
    }

    await next();

    if (processType) context.body = await processFunction({ content: context.body });
  } catch (error) {
    error.status = 500;
    context.response.status = error.status;
    throw error;
  }
};exports.serveServerSideRenderedFile = serveServerSideRenderedFile;



const renderTemplateUsingKoaViews = ({ filePath, basePath }) =>
async function renderTemplateUsingKoaViews(context, next) {
  (0, _assert.default)(context[symbol.context.clientSideProjectConfig], `• clientSideProjectConfig must be set by a previous middleware.`);
  let clientSidePath = context[symbol.context.clientSideProjectConfig].path;
  let filePath_ = filePath || context.path;
  context[symbol.context.parsed.filePath] = _path.default.join(
  clientSidePath,
  basePath || '',
  filePath_);


  if (_fs.default.existsSync(context[symbol.context.parsed.filePath]) && _fs.default.statSync(context[symbol.context.parsed.filePath]).isFile()) {
    await context.render(context[symbol.context.parsed.filePath], { argument: { context } });
    context.response.type = _path.default.extname(context[symbol.context.parsed.filePath]);
    await next();
  } else await next();
};exports.renderTemplateUsingKoaViews = renderTemplateUsingKoaViews;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.initializeAssetContentDelivery = initializeAssetContentDelivery;exports.initializeRootContentRendering = initializeRootContentRendering;
var serviceConfig = _interopRequireWildcard(require("../../configuration/configuration.js"));
var _server = require("../../utility/server.js");
var assetContentDeliveryGraph = _interopRequireWildcard(require("../../../resource/assetContentDelivery.graph.json"));
var rootContentRenderingGraph = _interopRequireWildcard(require("../../../resource/rootContentRendering.graph.json"));
var _graphInitialization = require("../../utility/graphInitialization.js");

var _traverseMiddlewareGraph = require("./middleware/traverseMiddlewareGraph.js");
var _graphReferenceContext = require("./graphReferenceContext.js");







async function initializeAssetContentDelivery({ targetProjectConfig, entrypointKey, port = serviceConfig.contentDelivery.port }) {

  let { configuredGraph } = await (0, _graphInitialization.initializeGraph)({
    contextData: { targetProjectConfig },
    graphDataArray: [assetContentDeliveryGraph] });



  let curriedMiddlewareFunctionReferenceList = (0, _graphReferenceContext.middlewareFunctionReferenceList)({ targetProjectConfig, configuredGraph }),
  curriedConditionFunctionReferenceList = (0, _graphReferenceContext.conditionFunctionReferenceList)({ targetProjectConfig, configuredGraph });
  let middlewareArray = [
  await (0, _traverseMiddlewareGraph.graphMiddlewareImmediatelyExecute)({
    entrypointKey: '293097b9-3522-4f2b-b557-8380ff3e96e3',
    configuredGraph,
    referenceList: middlewareContext => ({
      functionReferenceContext: Object.assign(curriedMiddlewareFunctionReferenceList({ middlewareContext }), curriedConditionFunctionReferenceList({ middlewareContext })) }) })];









  await (0, _server.createHttpServer)({
    label: `${serviceConfig.contentDelivery.serviceName}`,
    port,
    middlewareArray });

}







async function initializeRootContentRendering({ targetProjectConfig, entrypointKey, port = serviceConfig.contentRendering.port }) {

  let { configuredGraph } = await (0, _graphInitialization.initializeGraph)({
    contextData: { targetProjectConfig },
    graphDataArray: [rootContentRenderingGraph] });



  let curriedMiddlewareFunctionReferenceList = (0, _graphReferenceContext.middlewareFunctionReferenceList)({ targetProjectConfig, configuredGraph }),
  curriedConditionFunctionReferenceList = (0, _graphReferenceContext.conditionFunctionReferenceList)({ targetProjectConfig, configuredGraph });
  let middlewareArray = [
  await (0, _traverseMiddlewareGraph.graphMiddlewareImmediatelyExecute)({
    entrypointKey: '928efj94-29034jg90248-g2390jg823',
    configuredGraph,
    referenceList: middlewareContext => ({
      functionReferenceContext: Object.assign(curriedMiddlewareFunctionReferenceList({ middlewareContext }), curriedConditionFunctionReferenceList({ middlewareContext })) }) })];









  await (0, _server.createHttpServer)({
    label: `${serviceConfig.contentRendering.serviceName}`,
    port,
    middlewareArray });

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
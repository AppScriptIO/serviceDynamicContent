"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.initializeGraph = initializeGraph;var _graphTraversal = require("@dependency/graphTraversal");














var _koaCompose = _interopRequireDefault(require("koa-compose"));
var _bodyParserMiddleware2 = require("../middleware/bodyParser.middleware.js");var _bodyParserMiddleware;const { Graph } = _graphTraversal.Graph,{ Context } = _graphTraversal.Context,{ Database } = _graphTraversal.Database,{ GraphTraversal } = _graphTraversal.GraphTraversal;

const debugGraphMiddleware = (targetMiddleware) =>
new Proxy(targetMiddleware, {
  apply: function (target, thisArg, argumentsList) {
    console.log(target.name, ' Openning.');
    let result = Reflect.apply(...arguments);
    console.log(target.name, ' Closing.');
    return result;
  } });



const functionContext = {
  bodyParser: (_bodyParserMiddleware = _bodyParserMiddleware2.bodyParserMiddleware, debugGraphMiddleware(_bodyParserMiddleware)) },

conditionContext = {};

async function initializeGraph({ targetProjectConfig, graphDataArray = [] }) {var _defaultImplementatio;

  let contextInstance = new Context.clientInterface({ targetProjectConfig, functionContext, conditionContext, implementationKey: { traversalInterception: 'handleMiddlewareNextCall' } });

  let concreteDatabaseBehavior = new Database.clientInterface({
    implementationList: { boltCypherModelAdapter: _graphTraversal.modelAdapter.boltCypherModelAdapterFunction({ url: { protocol: 'bolt', hostname: 'localhost', port: 7687 } }) },
    defaultImplementation: 'boltCypherModelAdapter' });


  let implementationList = (_defaultImplementatio =
  _graphTraversal.defaultImplementationList, (
  list => {


    return list;
  })(_defaultImplementatio));
  let concreteGraphTraversalBehavior = new GraphTraversal.clientInterface({ implementationList: { middlewareGraph: implementationList }, defaultImplementation: 'middlewareGraph' });

  let configuredGraph = Graph.clientInterface({
    parameter: [
    {
      traversal: concreteGraphTraversalBehavior,
      database: concreteDatabaseBehavior,
      concreteBehaviorList: [contextInstance] }] });





  console.log(`â€¢ loading service graph data...`);
  let concereteDatabaseInstance = concreteDatabaseBehavior[_graphTraversal.Entity.reference.getInstanceOf](Database);
  let concereteDatabase = concereteDatabaseInstance[Database.reference.key.getter]();
  for (let graphData of graphDataArray) await concereteDatabase.loadGraphData({ nodeEntryData: graphData.node, connectionEntryData: graphData.edge });

  return { createGraphMiddleware: createGraphMiddlewareImmediatelyExecutedCallback(configuredGraph), configuredGraph };
}


const createGraphMiddlewareImmediatelyExecutedCallback = configuredGraph => ({ entrypointKey }) => async (context, next) => {
  let graph = new configuredGraph({ data: { middlewareParameter: { context } } });
  await graph.traverse({ nodeKey: entrypointKey });
  await next();
};


const createGraphMiddlewareAggregationCallback = configuredGraph => ({ entrypointKey }) => async (context, next) => {
  let graph = new configuredGraph({});
  let middlewareArray = await graph.traverse({ nodeKey: entrypointKey, implementationKey: { processData: 'returnMiddlewareFunction' } });
  await (0, _koaCompose.default)(middlewareArray)(context, next);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
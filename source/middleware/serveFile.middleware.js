"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.renderTemplateDocument = renderTemplateDocument;exports.serveServerSideRenderedFile = exports.serveStaticFile = void 0;var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));


var _underscore = _interopRequireDefault(require("underscore"));

var _koaSendfile = _interopRequireDefault(require("koa-sendfile"));

var _wrapStringStream = require("@dependency/wrapStringStream");






let serveStaticFile = ({ targetProjectConfig } = {}) =>
async function (context, next) {
  let relativeFilePath = option.filePath || context.path;
  let baseFolderRelativePath = option.directoryRelativePath || '';
  let clientSidePath = targetProjectConfig.clientSidePath;
  let absoluteFilePath = _path.default.normalize(_path.default.join(clientSidePath, baseFolderRelativePath, relativeFilePath));
  let fileStats = await (0, _koaSendfile.default)(context, absoluteFilePath);

  if (!fileStats || !fileStats.isFile()) await next();



};exports.serveStaticFile = serveStaticFile;



const serveServerSideRenderedFile = option => async (context, next) => {
  let clientSidePath = context.instance.config.clientSidePath;
  let baseFolderRelativePath = option.directoryRelativePath || '';
  let filePath = option.filePath || context.path;
  let renderType = option.renderType ?
  option.renderType :
  filePath.substr(filePath.lastIndexOf('$') + 1, filePath.length);
  let lastIndexPosition = filePath.lastIndexOf('$') == -1 ? filePath.length : filePath.lastIndexOf('$');
  let relativeFilePath = option.renderType ? filePath : filePath.substr(0, lastIndexPosition);
  let absoluteFilePath = _path.default.normalize(_path.default.join(clientSidePath, baseFolderRelativePath, relativeFilePath));

  let renderedContent;
  switch (renderType) {
    case 'convertSharedStylesToJS':
      renderedContent = await convertSharedStylesToJS({ filePath: absoluteFilePath, context });
      context.body = renderedContent;
      context.response.type = 'application/javascript';
      await next();
      break;
    case 'covertTextFileToJSModule':
      renderedContent = await covertTextFileToJSModule({ filePath: absoluteFilePath, context });
      context.body = renderedContent;
      context.response.type = 'application/javascript';
      await next();
      break;
    case 'renderHTMLImportWebcomponent':
      renderedContent = renderHTMLImportWebcomponent({ filePath: absoluteFilePath, context });
      context.body = renderedContent;
      await next();
      break;
    case 'renderJSImportWebcomponent':
      renderedContent = renderJSImportWebcomponent({ filePath: absoluteFilePath, context });
      context.response.type = 'application/javascript';
      context.body = renderedContent;
      await next();
      break;
    default:
      if (option.mimeType) {

        try {

          renderedContent = _fs.default.readFileSync(absoluteFilePath, 'utf8');
          context.body = _underscore.default.template(renderedContent)({
            Application,
            context,
            view: {},
            argument: {} });


          context.response.type = option.mimeType;
        } catch (error) {
          console.log(error);
          await next();
        }
      } else {
        if (_fs.default.existsSync(absoluteFilePath) && _fs.default.statSync(absoluteFilePath).isFile()) {

          await context.render(absoluteFilePath, {
            context,
            Application,
            view: {},
            argument: { layoutElement: 'webapp-layout-list' } });

          context.response.type = _path.default.extname(absoluteFilePath);
          await next();
        } else {
          await next();
        }
      }
      break;}




};exports.serveServerSideRenderedFile = serveServerSideRenderedFile;




async function convertSharedStylesToJS({ filePath, context }) {
  return await (0, _wrapStringStream.wrapStringStream)({
    stream: _fs.default.createReadStream(filePath),
    beforeString: "const $_documentContainer = document.createElement('div'); $_documentContainer.setAttribute('style', 'display: none;'); $_documentContainer.innerHTML = `",
    afterString: '`;document.head.appendChild($_documentContainer);' });

}


async function covertTextFileToJSModule({ filePath, context }) {
  let fileStream = _fs.default.createReadStream(filePath);
  return await (0, _wrapStringStream.wrapStringStream)({ stream: fileStream, beforeString: 'export default `', afterString: '`' });
}




function renderJSImportWebcomponent({ filePath, context }) {
  let fileDirectoryPath = filePath.substr(0, filePath.lastIndexOf('/'));
  let argument = { layoutElement: 'webapp-layout-list' };
  let view = {};

  let templatePart = {
    css: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.css`, 'utf8'))({ Application, argument }),
    html: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.html`, 'utf8'))({ Application, argument }) };

  try {
    let content = _fs.default.readFileSync(filePath, 'utf8');
    let rendered = _underscore.default.template(content)({ Application, view, argument: Object.assign(argument, templatePart) });
    return rendered;
  } catch (error) {
    console.log(error);
  }
}




function renderHTMLImportWebcomponent({ filePath, context }) {
  let fileDirectoryPath = filePath.substr(0, filePath.lastIndexOf('/'));
  let argument = { layoutElement: 'webapp-layout-list' };
  let view = {};

  let templatePart = {
    css: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.css`, 'utf8'))({ Application, argument }),
    js: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.js`, 'utf8'))({ Application, argument }),
    html: _underscore.default.template(_fs.default.readFileSync(`${fileDirectoryPath}/component.html`, 'utf8'))({ Application, argument }) };

  try {
    let content = _fs.default.readFileSync(filePath, 'utf8');
    let rendered = _underscore.default.template(content)({ Application, view, argument: Object.assign(argument, templatePart) });
    return rendered;
  } catch (error) {
    console.log(error);
  }
}









function renderTemplateDocument({ documentKey }) {
  let TemplateController = createStaticInstanceClasses({
    Superclass: Application,
    implementationType: 'Template' });

  return async (context, next) => {
    let connection = Application.rethinkdbConnection;
    let documentObject = await getTableDocument.instance['template_documentBackend'](connection, documentKey);



    let templateController = await TemplateController.createContext({ portAppInstance: context.instance });

    let renderedContent = await templateController.initializeNestedUnit({ nestedUnitKey: documentObject.templateNestedUnit });
    context.body = renderedContent;

    await next();
  };
}

async function handleTemplateDocument(documentKey) {

  let clientBasePath = '';

  let documentObject =
  {
    key: '0d65c113-acce-4f01-8eea-ab6cb7152405',
    label: { name: 'entrypoint' },
    templateNestedUnit: '0d65c113-acce-4f01-8eea-ab6cb7152405' } || (
  await getTableDocument.instance['template_documentBackend'](serviceConfig.rethinkdb, documentKey));

  let renderedContent = await TemplateController.traverse(documentObject.templateNestedUnit);
  this.context.body = renderedContent;

  let argument = { layoutElement: 'webapp-layout-list' };
  let mainDocumentElement = await _fs.default.readFileSync(`${this.context.instance.config.clientBasePath}/template/root/document-element/document-element.html`, 'utf-8');
  let mainDocumentElementImport = await _fs.default.readFileSync(`${this.context.instance.config.clientBasePath}/template/root/document-element/document-element.import.html`, 'utf-8');


  const templateArgument = {
    templateController,
    context: this.context,
    Application,
    argument: {} };


  const view = {
    metadata: _underscore.default.template((await _fs.default.readFileSync(`${this.context.instance.config.clientBasePath}/asset/metadata/metadata.html`, 'utf-8'))),
    header: _underscore.default.template((await _fs.default.readFileSync(`${this.context.instance.config.clientBasePath}/template/root/entrypoint.js.html`, 'utf-8'))),
    body: _underscore.default.template(mainDocumentElement, { Application, argument }) };

  let template = _underscore.default.template((await _fs.default.readFileSync(`${this.context.instance.config.clientBasePath}/template/root/entrypoint.html`, 'utf-8')));
  this.context.body = template(Object.assign({}, templateArgument, { view, templateArgument }));


  await this.context.render(`${this.context.instance.config.clientBasePath}/template/root/entrypoint.html`, Object.assign({}, templateArgument, { view, templateArgument }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,